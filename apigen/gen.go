// Package apigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Book defines model for Book.
type Book struct {
	// AuthUserId ユーザーの識別子
	AuthUserId *string `json:"authUserId,omitempty"`

	// Author 本の著者
	Author *string `json:"author,omitempty"`

	// BookStatus 本の状態
	BookStatus *string `json:"bookStatus,omitempty"`

	// CreatedAt 本の作成日時
	CreatedAt *string `json:"createdAt,omitempty"`

	// Id 本の識別子
	Id *string `json:"id,omitempty"`

	// ImageURL 本の画像
	ImageURL *string `json:"imageURL,omitempty"`

	// Isbn10 本のisbn10
	Isbn10 *string `json:"isbn10,omitempty"`

	// Page 本のページ数
	Page *string `json:"page,omitempty"`

	// Price 本の価格
	Price *string `json:"price,omitempty"`

	// Title 本の書名
	Title *string `json:"title,omitempty"`

	// UpdatedAt 本の更新日時
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// Chart defines model for Chart.
type Chart struct {
	// Data 各データ内容
	Data *string `json:"data,omitempty"`

	// Id 図表の識別子
	Id *string `json:"id,omitempty"`

	// Label チャートを分類する識別子
	Label *string `json:"label,omitempty"`

	// Month 各データの月
	Month *string `json:"month,omitempty"`

	// Year 各データの年
	Year *string `json:"year,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Message エラーメッセージ
	Message *string `json:"message,omitempty"`
}

// Record defines model for Record.
type Record struct {
	// Costs 購入額の総計
	Costs *string `json:"costs,omitempty"`

	// CostsRead 購入額のうち読了分
	CostsRead *string `json:"costsRead,omitempty"`

	// Id 記録の識別子
	Id *string `json:"id,omitempty"`

	// Pages 購入ページ数の総計
	Pages *string `json:"pages,omitempty"`

	// PagesRead 購入ページ数のうち読了分
	PagesRead *string `json:"pagesRead,omitempty"`

	// Volumes 購入冊数の総計
	Volumes *string `json:"volumes,omitempty"`

	// VolumesRead 購入冊数のうち読了分
	VolumesRead *string `json:"volumesRead,omitempty"`
}

// User defines model for User.
type User struct {
	// AuthUserId フロントユーザーの識別子
	AuthUserId *string `json:"authUserId,omitempty"`

	// CreatedAt ユーザーの作成日時
	CreatedAt *string `json:"createdAt,omitempty"`

	// Email ユーザーemail
	Email *string `json:"email,omitempty"`

	// Id バックユーザーの識別子
	Id *string `json:"id,omitempty"`

	// Name ユーザー名
	Name *string `json:"name,omitempty"`

	// Password パスワード（あれば）
	Password *string `json:"password,omitempty"`

	// UpdatedAt ユーザーの更新日時
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	// Query 検索文字列
	Query string `form:"query" json:"query"`
}

// DeleteShelfAuthUserIdParams defines parameters for DeleteShelfAuthUserId.
type DeleteShelfAuthUserIdParams struct {
	// BookId 書籍の識別子
	BookId []string `form:"bookId" json:"bookId"`
}

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = User

// PostShelfAuthUserIdJSONRequestBody defines body for PostShelfAuthUserId for application/json ContentType.
type PostShelfAuthUserIdJSONRequestBody = Book

// PutShelfAuthUserIdJSONRequestBody defines body for PutShelfAuthUserId for application/json ContentType.
type PutShelfAuthUserIdJSONRequestBody = Book

// PutUsersJSONRequestBody defines body for PutUsers for application/json ContentType.
type PutUsersJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// user情報の登録
	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error
	// ユーザーごとにチャートデータを返す
	// (GET /charts/{authUserId})
	GetChartsAuthUserId(ctx echo.Context, authUserId string) error
	// サーバーの監視
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// DBサーバーの監視
	// (GET /health/db)
	GetHealthDb(ctx echo.Context) error
	// ユーザーごとに記録を返す
	// (GET /records/{authUserId})
	GetRecordsAuthUserId(ctx echo.Context, authUserId string) error
	// 書籍の検索結果を取得
	// (GET /search)
	GetSearch(ctx echo.Context, params GetSearchParams) error
	// ユーザーごとに本棚の本を複数削除
	// (DELETE /shelf/{authUserId})
	DeleteShelfAuthUserId(ctx echo.Context, authUserId string, params DeleteShelfAuthUserIdParams) error
	// ユーザーごとに本棚を取得
	// (GET /shelf/{authUserId})
	GetShelfAuthUserId(ctx echo.Context, authUserId string) error
	// ユーザーごとに本を本棚に1冊ずつ作成
	// (POST /shelf/{authUserId})
	PostShelfAuthUserId(ctx echo.Context, authUserId string) error
	// ユーザーごとに本棚の本を1冊ずつ更新
	// (PUT /shelf/{authUserId})
	PutShelfAuthUserId(ctx echo.Context, authUserId string) error
	// ユーザー情報を更新
	// (PUT /users)
	PutUsers(ctx echo.Context) error
	// ユーザーを削除
	// (DELETE /users/{authUserId})
	DeleteUsersAuthUserId(ctx echo.Context, authUserId string) error
	// ユーザー情報を返す
	// (GET /users/{authUserId})
	GetUsersAuthUserId(ctx echo.Context, authUserId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// GetChartsAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetChartsAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetChartsAuthUserId(ctx, authUserId)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// GetHealthDb converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthDb(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthDb(ctx)
	return err
}

// GetRecordsAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRecordsAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRecordsAuthUserId(ctx, authUserId)
	return err
}

// GetSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearch(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSearch(ctx, params)
	return err
}

// DeleteShelfAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteShelfAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteShelfAuthUserIdParams
	// ------------- Required query parameter "bookId" -------------

	err = runtime.BindQueryParameter("form", true, true, "bookId", ctx.QueryParams(), &params.BookId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bookId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteShelfAuthUserId(ctx, authUserId, params)
	return err
}

// GetShelfAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetShelfAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetShelfAuthUserId(ctx, authUserId)
	return err
}

// PostShelfAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PostShelfAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostShelfAuthUserId(ctx, authUserId)
	return err
}

// PutShelfAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PutShelfAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutShelfAuthUserId(ctx, authUserId)
	return err
}

// PutUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsers(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsers(ctx)
	return err
}

// DeleteUsersAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersAuthUserId(ctx, authUserId)
	return err
}

// GetUsersAuthUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersAuthUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authUserId" -------------
	var authUserId string

	err = runtime.BindStyledParameterWithOptions("simple", "authUserId", ctx.Param("authUserId"), &authUserId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authUserId: %s", err))
	}

	ctx.Set(ApiKeyAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersAuthUserId(ctx, authUserId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(baseURL+"/charts/:authUserId", wrapper.GetChartsAuthUserId)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/health/db", wrapper.GetHealthDb)
	router.GET(baseURL+"/records/:authUserId", wrapper.GetRecordsAuthUserId)
	router.GET(baseURL+"/search", wrapper.GetSearch)
	router.DELETE(baseURL+"/shelf/:authUserId", wrapper.DeleteShelfAuthUserId)
	router.GET(baseURL+"/shelf/:authUserId", wrapper.GetShelfAuthUserId)
	router.POST(baseURL+"/shelf/:authUserId", wrapper.PostShelfAuthUserId)
	router.PUT(baseURL+"/shelf/:authUserId", wrapper.PutShelfAuthUserId)
	router.PUT(baseURL+"/users", wrapper.PutUsers)
	router.DELETE(baseURL+"/users/:authUserId", wrapper.DeleteUsersAuthUserId)
	router.GET(baseURL+"/users/:authUserId", wrapper.GetUsersAuthUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"aOUmc78GAAD//1C8HnszMwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
